/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/

let Learn = 0;

let CanCastFromAllIngrs = false;

let Commands = [];

// game loop
while (true) {
    const actionCount = parseInt(readline()); // the number of spells and recipes in play
    let TimeNow = Date.now();
    let BrewOrders = [];
    let CastOrdersMe = [];
    let CastOrdersOpponent = [];
    let LearningAbleCast = [];
    for (let i = 0; i < actionCount; i++) {
        var inputs = readline().split(' ');
        const actionId = parseInt(inputs[0]); // the unique ID of this spell or recipe
        const actionType = inputs[1]; // in the first league: BREW; later: CAST, OPPONENT_CAST, LEARN, BREW
        const delta0 = parseInt(inputs[2]); // tier-0 ingredient change
        const delta1 = parseInt(inputs[3]); // tier-1 ingredient change
        const delta2 = parseInt(inputs[4]); // tier-2 ingredient change
        const delta3 = parseInt(inputs[5]); // tier-3 ingredient change
        const price = parseInt(inputs[6]); // the price in rupees if this is a potion
        const tomeIndex = parseInt(inputs[7]); // in the first two leagues: always 0; later: the index in the tome if this is a tome spell, equal to the read-ahead tax
        const taxCount = parseInt(inputs[8]); // in the first two leagues: always 0; later: the amount of taxed tier-0 ingredients you gain from learning this spell
        const castable = inputs[9] !== '0'; // in the first league: always 0; later: 1 if this is a castable player spell
        const repeatable = inputs[10] !== '0'; // for the first two leagues: always 0; later: 1 if this is a repeatable player spell
        if(actionType == "CAST"){
            let Free = delta0 >= 0 && delta1 >= 0 && delta2 >= 0 && delta3 >= 0;
            CastOrdersMe.push({castable, ingredients: [delta0, delta1, delta2, delta3], actionId, Free});
        }
        else if(actionType == "OPPONENT_CAST"){
            let Free = delta0 >= 0 && delta1 >= 0 && delta2 >= 0 && delta3 >= 0;
            CastOrdersOpponent.push({castable, ingredients: [delta0, delta1, delta2, delta3], actionId, Free});
        }
        else if(actionType == "BREW"){
            BrewOrders.push({ingredients: [delta0, delta1, delta2, delta3], price, actionId});
        }
        else{
            //Learn
            LearningAbleCast.push({ingredients: [delta0, delta1, delta2, delta3], taxCount, actionId})
        }
    }

    //inventory
    let CurrIngrMe = Array(4).fill(0);
    let CurrIngrOpponent = Array(4).fill(0);
    for (let i = 0; i < 2; i++) {
        var inputs = readline().split(' ');
        const inv0 = parseInt(inputs[0]); // tier-0 ingredients in inventory
        const inv1 = parseInt(inputs[1]);
        const inv2 = parseInt(inputs[2]);
        const inv3 = parseInt(inputs[3]);
        if(i == 0){
            CurrIngrMe[0] = inv0;
            CurrIngrMe[1] = inv1;
            CurrIngrMe[2] = inv2;
            CurrIngrMe[3] = inv3;
        }
        else{
            CurrIngrOpponent[0] = inv0;
            CurrIngrOpponent[1] = inv1;
            CurrIngrOpponent[2] = inv2;
            CurrIngrOpponent[3] = inv3;
        }
        const score = parseInt(inputs[4]); // amount of rupees
    }

    //console.error(LearningAbleCast)

    if(CanCastFromAllIngrs == false)
        CanCastFromAllIngrs = CanCastFromAllIngredients(CastOrdersMe);

    if(Learn > 0 || CanCastFromAllIngrs == false){
        console.log("LEARN " + LearningAbleCast[0].actionId)
        Learn--;
        continue;
    }

    //1) if I can Brew A spell than Brew spell
    let Id = CanIBrewSpell(CurrIngrMe, BrewOrders);
    if(Id != -1){
        console.log("BREW " + Id + " Time: "+ (Date.now() - TimeNow));
    }
    else{
        //2) if I can Cast ingrs the Cast ingrs
        let ArrOutput = CanICastIngrAndThenBrewSpell(LearningAbleCast, CurrIngrMe, BrewOrders, CastOrdersMe);
        let Index = ArrOutput[0];
        if(Index > -1 && CastOrdersMe[Index].castable == false){
            if(ArrOutput[1])
                Commands.unshift(Index);
            //I Rest after every Cast
            console.log("REST Time: "+ (Date.now() - TimeNow));
        }
        else if(Index > -1){
            console.log("CAST " + CastOrdersMe[Index].actionId + " Time: "+ (Date.now() - TimeNow));
        }
        else if(Index == -100){
            //Learn the first spell so I would be able to
            //make potion with him in the next turn
            console.log("LEARN " + LearningAbleCast[0].actionId + " Time: "+ (Date.now() - TimeNow));
        }
        else{
            //I can't do anything then I Rest
            console.log("REST Time: "+ (Date.now() - TimeNow));
        }
    }

    

    // Write an action using console.log()
    // To debug: console.error('Debug messages...');


    // in the first league: BREW <id> | WAIT; later: BREW <id> | CAST <id> [<times>] | LEARN <id> | REST | WAIT
}

function CanIBrewSpell(CurrIngrMe, BrewOrders){

    let Id = -1;
    let MaxPrice = 0;

    for(let i = 0; i < BrewOrders.length; i++){
        let ingrs = BrewOrders[i].ingredients;
        let price = BrewOrders[i].price;

        let SumIngredients = GetSumIngredients(ingrs, CurrIngrMe);
        if(SumIngredients != undefined && 
           price > MaxPrice){
            MaxPrice = price;
            Id = BrewOrders[i].actionId;
        }
    }
    return Id;
}

function MakeCastSoNextTurnsIBrew(CurrIngrMe, BrewOrders, CastOrdersMe, depth, action){

    if(depth == 0){
        return -1;
    }

    //console.error();
    //console.error("action: " + action);
    //console.error("CurrIngrMe: ")
    //console.error(CurrIngrMe)

    for(let i = 0; i < CastOrdersMe.length; i++){

        let CastIngredients = CastOrdersMe[i].ingredients;

        let SumIngredients = GetSumIngredients(CastIngredients, CurrIngrMe);
        if(SumIngredients != undefined){
            if(CanIBrewSpell(SumIngredients, BrewOrders) != -1){
                action.push(i);
                /*console.error();
                console.error("action: " + action);
                console.error("CurrIngrMe Final: ")
                console.error(SumIngredients)
                console.error("BrewOrders: ")
                console.error(BrewOrders)*/
                return action;
            }
            else{
                let act = action.slice();
                act.push(i);
                let Result = MakeCastSoNextTurnsIBrew(SumIngredients, BrewOrders, CastOrdersMe, depth - 1, act);
                if(Result != -1){
                    return Result;
                }
            }
        }
    }

    return [];
}

function CanICastIngrAndThenBrewSpell(LearningAbleCast, CurrIngrMe, BrewOrders, CastOrdersMe){

    //console.error("Commands: ")
    //console.error(Commands)

    //If I can do a Cast that will lead me 
    //to Brew a potion in the next turn
    if(Commands.length == 0){
        Commands = MakeCastSoNextTurnsIBrew(CurrIngrMe, BrewOrders, CastOrdersMe, 3, []);
        if(Commands.length != 0){
            return [Commands.splice(0,1)[0], true];
        }
    }
    else{
        //console.error(CastOrdersMe)
        return [Commands.splice(0,1)[0], true];
    }

    //console.error("Here")

    //If I can learn the first Cast that will lead me 
    //to Brew a potion in the next turn
    let SumIngredients = GetSumIngredients(LearningAbleCast[0].ingredients, CurrIngrMe);
    if(SumIngredients != undefined){
        if(CanIBrewSpell(SumIngredients, BrewOrders) != -1){
            return [-100, false];
        }
    }
    

    let Min = 100;

    let Index = -1;

    for(let i = 0; i < CastOrdersMe.length; i++){

        let CastIngredients = CastOrdersMe[i].ingredients;

        let SumIngredients = GetSumIngredients(CastIngredients, CurrIngrMe);
        if(SumIngredients != undefined){
            let CurrMin = 0;
            
            //Find the biggest differnce between ingredients
            for(let i = 0; i < SumIngredients.length; i++){
                let ingrA = SumIngredients[i];
                for(let j = i + 1; j < SumIngredients.length; j++){
                    let ingrB = SumIngredients[j];
                    let diff = Math.abs(ingrA - ingrB);
                    if(diff > CurrMin){
                        CurrMin = diff;
                    }
                }
            }
            

            if(CurrMin >= Min){
                continue;
            }
            
            Min = CurrMin;
            Index = i;
        }
    }

    return [Index, false];
}

function CanCastFromAllIngredients(CastOrdersMe){

    let CanCastIngrs = Array(4).fill(0);

    CastOrdersMe.forEach((x) => {
        x.ingredients.forEach((v, index) => {
            if(v < 0){
                CanCastIngrs[index] = 1;
            }
        })

    })

    return CanCastIngrs.every(x => x == 1);
}

function GetSumIngredients(Ingredients1, Ingredients2){

    let arr = [];
    let sum = 0;

    for(let i = 0; i < Ingredients2.length; i++){
        arr[i] = Ingredients2[i] + Ingredients1[i];
        sum += arr[i];
    }

    //Check if there are more than 10 ingredients
    if(sum > 10){
        return undefined;
    }

    //I have negative ingredients
    if(arr.every(x => x >= 0) == false){
        return undefined;
    }

    return arr;

}
