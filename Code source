/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/

let Learn = 4;

let CanCastFromAllIngrs = false;

let Commands = [];
let CommandsPrice = 0;
let PossiblesPaths = [];

// game loop
while (true) {
    let IsTargetExist = false;
    const actionCount = parseInt(readline()); // the number of spells and recipes in play
    let TimeNow = Date.now();
    let BrewOrders = [];
    let CastOrdersMe = [];
    let CastOrdersOpponent = [];
    let LearningAbleCast = [];
    for (let i = 0; i < actionCount; i++) {
        var inputs = readline().split(' ');
        const actionId = parseInt(inputs[0]); // the unique ID of this spell or recipe
        const actionType = inputs[1]; // in the first league: BREW; later: CAST, OPPONENT_CAST, LEARN, BREW
        const delta0 = parseInt(inputs[2]); // tier-0 ingredient change
        const delta1 = parseInt(inputs[3]); // tier-1 ingredient change
        const delta2 = parseInt(inputs[4]); // tier-2 ingredient change
        const delta3 = parseInt(inputs[5]); // tier-3 ingredient change
        const price = parseInt(inputs[6]); // the price in rupees if this is a potion
        const tomeIndex = parseInt(inputs[7]); // in the first two leagues: always 0; later: the index in the tome if this is a tome spell, equal to the read-ahead tax
        const taxCount = parseInt(inputs[8]); // in the first two leagues: always 0; later: the amount of taxed tier-0 ingredients you gain from learning this spell
        const castable = inputs[9] !== '0'; // in the first league: always 0; later: 1 if this is a castable player spell
        const repeatable = inputs[10] !== '0'; // for the first two leagues: always 0; later: 1 if this is a repeatable player spell
        if(actionType == "CAST"){
            let Free = delta0 >= 0 && delta1 >= 0 && delta2 >= 0 && delta3 >= 0;
            CastOrdersMe.push({castable, ingredients: [delta0, delta1, delta2, delta3], actionId, Free, repeatable});
        }
        else if(actionType == "OPPONENT_CAST"){
            let Free = delta0 >= 0 && delta1 >= 0 && delta2 >= 0 && delta3 >= 0;
            CastOrdersOpponent.push({castable, ingredients: [delta0, delta1, delta2, delta3], actionId, Free, repeatable});
        }
        else if(actionType == "BREW"){
            if(Commands.length != 0 && parseInt(Commands[Commands.length - 1].split(' ')[1]) == actionId){
                IsTargetExist = true;
            }
            BrewOrders.push({ingredients: [delta0, delta1, delta2, delta3], price, actionId});
        }
        else{
            //Learn
            LearningAbleCast.push({tomeIndex, ingredients: [delta0, delta1, delta2, delta3], taxCount, actionId})
        }
    }

    //inventory
    let CurrIngrMe = Array(4).fill(0);
    let CurrIngrOpponent = Array(4).fill(0);
    for (let i = 0; i < 2; i++) {
        var inputs = readline().split(' ');
        const inv0 = parseInt(inputs[0]); // tier-0 ingredients in inventory
        const inv1 = parseInt(inputs[1]);
        const inv2 = parseInt(inputs[2]);
        const inv3 = parseInt(inputs[3]);
        if(i == 0){
            CurrIngrMe[0] = inv0;
            CurrIngrMe[1] = inv1;
            CurrIngrMe[2] = inv2;
            CurrIngrMe[3] = inv3;
        }
        else{
            CurrIngrOpponent[0] = inv0;
            CurrIngrOpponent[1] = inv1;
            CurrIngrOpponent[2] = inv2;
            CurrIngrOpponent[3] = inv3;
        }
        const score = parseInt(inputs[4]); // amount of rupees
    }

    if(IsTargetExist == false){
        Commands = [];
    }

    //console.error(LearningAbleCast)

    if(CanCastFromAllIngrs == false)
        CanCastFromAllIngrs = CanCastFromAllIngredients(CastOrdersMe);

    if(Learn > 0 || CanCastFromAllIngrs == false){
        console.log("LEARN " + LearningAbleCast[0].actionId)
        Learn--;
        continue;
    }


    let Output = CanICastIngrAndThenBrewSpell(LearningAbleCast, CurrIngrMe, BrewOrders, CastOrdersMe);
    /*console.error();
    console.error("Output: ");
    console.error(Output);
    console.error();*/
    if(Output[1] == false){
        let Index = Output[0];
        if(Index != -1 && CastOrdersMe[Index].castable == true){
            console.log("CAST " + CastOrdersMe[Index].actionId + " Time: "+ (Date.now() - TimeNow));
        }
        else{
            console.log("REST Time: "+ (Date.now() - TimeNow));
        }
    }
    else{
        console.error();
        console.error("Price: "+CommandsPrice);
        if(Output[0] == "Rest"){
            console.log("REST Time: "+ (Date.now() - TimeNow));
        }
        else if(typeof Output[0] == "string" && Output[0].includes("Brew")){
            let ActionId = parseInt(Output[0].split(' ')[1]);
            console.log("BREW " + ActionId + " Time: "+ (Date.now() - TimeNow));
        }
        else if(typeof Output[0] == "string" && Output[0].includes("CAST")){
            let Actions = Output[0].split(' ');
            let ActionId = parseInt([1]);
            console.log("CAST " + ActionId + " Time: "+ (Date.now() - TimeNow));
        }
        else{
            let ActionId = Output[0];
            if(ActionId == Commands[0]){
                console.error("LEARN")
                console.log("LEARN " + ActionId + " Time: "+ (Date.now() - TimeNow));
            }
            else{
                console.log("CAST " + ActionId + " Time: "+ (Date.now() - TimeNow));
            }
        }
    }
    // Write an action using console.log()
    // To debug: console.error('Debug messages...');


    // in the first league: BREW <id> | WAIT; later: BREW <id> | CAST <id> [<times>] | LEARN <id> | REST | WAIT
}

/*
- Creating a simulation to know which potions I can get to in a definde number of turns or less
- sort by number of turns and the by price
- pick the first path to potion

//if depth == 0
    // return;

//One time I do rest and then I preforme the Casts and one time without rest before

//Add to the current path Rest and make a copy of the list of Casts but change every Cast to be not exhusted

//for every Cast I can make and the Cast is not exhusted
    //make it
    //if the Cast was ok then check if I can brew a potion with my current inventory
        //if I can
        //Remembr the path I made to reach this potion and remembr the potion price

        //else
        //make a copy of the list of Casts I can do
        //make the current Cast I used exhusted
        //call the function again with my current inventory (after the Cast) and lower the depth by 1 and add to the path the current action

//Do the same thing but without resting

//for every Cast I can make and the Cast is not exhusted
    //make it
    //if the Cast was ok then check if I can brew a potion with my current inventory
        //if I can
        //Remembr the path I made to reach this potion and remembr the potion price

        //else
        //make a copy of the list of Casts I can do
        //make the current Cast I used exhusted
        //call the function again with my current inventory (after the Cast) and lower the depth by 1 and add to the path the current action

//for every Cast I can learn
    //Add to the current path that I learnd
    //learn it and make it
    //if the Cast was ok then check if I can brew a potion with my current inventory
        //if I can
        //Remembr the path I made to reach this potion and remembr the potion price

        //else
        //make a copy of the list of Casts I can do
        //make the current Cast I used exhusted
        //make a copy of the list of learnable Casts I can learn
        //delete the current Cast I learn
        //call the function again with my current inventory (after the Cast) and lower the depth by 1 and add to the path the current action

// Here I have all the potions I can make by using the definded dpeth (number of turns)
// , using Cast, learning, rest, exhusted

*/

function Recursive(CurrIngreds, BrewOrders, CastOrders, LearningAbleCast, depth, Path){

    if(depth == 0){
        return;
    }

    let SavedPath = Path.slice();


    for(let i = 0; i < CastOrders.length; i++){
        if(CastOrders[i].castable == false){
            let SumIngerds = GetSumIngredients(CastOrders[i].ingredients, CurrIngreds);
            if(SumIngerds != undefined){
                let Index = CanIBrewSpell(SumIngerds, BrewOrders);
                if(Index != -1){
                    Path.push("Rest");
                    Path.push(CastOrders[i].actionId);
                    let Brew = "Brew " + BrewOrders[Index].actionId;
                    Path.push(Brew);
                    let Price = BrewOrders[Index].price;
                    let check = false;
                    //console.error("Path: ")
                    //console.error(Path)
                    for(let j = 0; j < Path.length - 1; j++){
                        if(typeof Path[j] == "number" && Path[j + 1] == "Rest"){
                            let mone = 1;
                            let Num = Path[j];
                            if(CastOrders[GetIndexOfId(CastOrders, Num)].repeatable == false){
                                continue;
                            }
                            let SavedJ = j + 2;
                            while(SavedJ < Path.length - 1 && Path[SavedJ] == Num){
                                mone++;
                                SavedJ+=2;
                            }

                            SavedJ--;

                            if(mone > 1){
                                if(Path[SavedJ] == "Rest")
                                    Path.splice(j + 1, mone * 2 - 1);
                                else
                                    Path.splice(j + 1, mone * 2 - 2);

                                Path[j] = "CAST " + Num + " " + mone;
                                check = true;
                            }
                        }
                    }

                    if(check){
                        console.error("Here!!!!!! Path: ")
                        console.error(Path)
                    }
                    if(PossiblesPaths[Price] == undefined){
                        PossiblesPaths[Price] = {Path, Price};
                    }
                    else if(PossiblesPaths[Price].length > Path.length){
                        PossiblesPaths[Price] = {Path, Price};
                    }
                    Path = SavedPath.slice();
                }
                else{
                    Path.push("Rest");
                    Path.push(CastOrders[i].actionId);
                    Recursive(SumIngerds, BrewOrders, CastOrders, LearningAbleCast, depth - 1, Path);
                    Path = SavedPath.slice();
                }
            }
        }
        else{
            let SumIngerds = GetSumIngredients(CastOrders[i].ingredients, CurrIngreds);
            if(SumIngerds != undefined){
                let Index = CanIBrewSpell(SumIngerds, BrewOrders);
                if(Index != -1){
                    Path.push(CastOrders[i].actionId);
                    let Brew = "Brew " + BrewOrders[Index].actionId;
                    Path.push(Brew);
                    let Price = BrewOrders[Index].price;
                    let check = false;
                    for(let j = 0; j < Path.length - 1; j++){
                        if(typeof Path[j] == "number" && Path[j + 1] == "Rest"){
                            let mone = 1;
                            let Num = Path[j];
                            if(CastOrders[GetIndexOfId(CastOrders, Num)].repeatable == false){
                                continue;
                            }
                            let SavedJ = j + 2;
                            while(SavedJ < Path.length - 1 && Path[SavedJ] == Num){
                                mone++;
                                SavedJ+=2;
                            }

                            SavedJ--;

                            if(mone > 1){
                                if(Path[SavedJ] == "Rest")
                                    Path.splice(j + 1, mone * 2 - 1);
                                else
                                    Path.splice(j + 1, mone * 2 - 2);

                                Path[j] = "CAST " + Num + " " + mone;
                                check = true;
                            }
                        }
                    }

                    if(check){
                        console.error("Here!!!!!! Path: ")
                        console.error(Path)
                    }

                    if(PossiblesPaths[Price] == undefined){
                        PossiblesPaths[Price] = {Path, Price};
                    }
                    else if(PossiblesPaths[Price].length > Path.length){
                        PossiblesPaths[Price] = {Path, Price};
                    }
                    Path = SavedPath.slice();
                }
                else{
                    Path.push(CastOrders[i].actionId);
                    let CastList = CastOrders.slice();
                    CastOrders[i].castable = false;
                    Recursive(SumIngerds, BrewOrders, CastList, LearningAbleCast, depth - 1, Path);
                    CastOrders[i].castable = true;
                    Path = SavedPath.slice();
                }
            }
        }
    }

    /*for(let i = 0; i < LearningAbleCast.length; i++){
        if(LearningAbleCast[i].tomeIndex > CurrIngreds[0]){
            continue;
        }
        let TempCurrIngreds = CurrIngreds.slice();
        TempCurrIngreds[0] -= LearningAbleCast[i].tomeIndex;
        let SumIngerds = GetSumIngredients(LearningAbleCast[i].ingredients, TempCurrIngreds);
        if(SumIngerds != undefined){
            let Index = CanIBrewSpell(SumIngerds, BrewOrders);
            if(Index != -1){
                //Learn
                Path.push(LearningAbleCast[i].actionId);
                //Cast
                Path.push(LearningAbleCast[i].actionId);
                let Brew = "Brew " + BrewOrders[Index].actionId;
                Path.push(Brew);
                let Price = BrewOrders[Index].price;
                if(PossiblesPaths[Price] == undefined){
                    PossiblesPaths[Price] = {Path, Price};
                }
                else if(PossiblesPaths[Price].length > Path.length){
                    PossiblesPaths[Price] = {Path, Price};
                }
                Path = SavedPath.slice();
            }
            else{
                //Learn
                Path.push(LearningAbleCast[i].actionId);
                //Cast
                Path.push(LearningAbleCast[i].actionId);
                let ListLearningAbleCast = LearningAbleCast.slice();
                ListLearningAbleCast.splice(i,1);
                CastOrders.push(LearningAbleCast[i]);
                CastOrders[CastOrders.length - 1].castable = false;
                Recursive(SumIngerds, BrewOrders, CastOrders, ListLearningAbleCast, depth - 1, Path);
                Path = SavedPath.slice();
                CastOrders.splice(CastOrders.length - 1,1);
            }
        }
    }*/
}

function CanIBrewSpell(CurrIngrMe, BrewOrders){

    let Index = -1;
    let MaxPrice = 0;

    for(let i = 0; i < BrewOrders.length; i++){
        let ingrs = BrewOrders[i].ingredients;
        let price = BrewOrders[i].price;

        let SumIngredients = GetSumIngredients(ingrs, CurrIngrMe);
        if(SumIngredients != undefined && 
           price > MaxPrice){
            MaxPrice = price;
            Index = i;
        }
    }
    return Index;
}

function CanICastIngrAndThenBrewSpell(LearningAbleCast, CurrIngrMe, BrewOrders, CastOrdersMe){

    PossiblesPaths = [];
        
    if(CastOrdersMe. length <= 9)
         Recursive(CurrIngrMe, BrewOrders, CastOrdersMe, LearningAbleCast, 5, []);
    else if(CastOrdersMe. length <= 10)
        Recursive(CurrIngrMe, BrewOrders, CastOrdersMe, LearningAbleCast, 4, []);
    else if(CastOrdersMe. length <= 20)
        Recursive(CurrIngrMe, BrewOrders, CastOrdersMe, LearningAbleCast, 3, []);

    //sort by price
    PossiblesPaths.sort((a,b) => {
        return Math.abs(2.3 - (a.Price / a.Path.length)) - Math.abs(2.3 - (b.Price / b.Path.length));
    });

    console.error("Commands: ")
    console.error(Commands)


    console.error("PossiblesPaths: ");
    console.error(PossiblesPaths);

    if(PossiblesPaths.length > 0){
        let BestPath = PossiblesPaths[0].Path;
        let BestPrice = PossiblesPaths[0].Price;

        if(Commands.length == 0){
            Commands = BestPath;
            CommandsPrice = BestPrice;
            return [Commands.splice(0,1)[0], true];
        }
        else{
            if(BestPrice >  CommandsPrice && Math.abs(2.3 - (BestPrice / BestPath.length)) < Math.abs(2.3 - (CommandsPrice / Commands.length))){
                console.error("CHANGE!!!!!!!!!!!!!!")
                Commands = BestPath;
                CommandsPrice = BestPrice;
                return [Commands.splice(0,1)[0], true];
            }
            else
                return [Commands.splice(0,1)[0], true];
        }
    }
    

    let Min = 100;

    let Index = -1;

    for(let i = 0; i < CastOrdersMe.length; i++){

        let CastIngredients = CastOrdersMe[i].ingredients;

        let SumIngredients = GetSumIngredients(CastIngredients, CurrIngrMe);
        if(SumIngredients != undefined){
            let CurrMin = 0;
            
            //Find the biggest differnce between ingredients
            for(let i = 0; i < SumIngredients.length; i++){
                let ingrA = SumIngredients[i];
                for(let j = i + 1; j < SumIngredients.length; j++){
                    let ingrB = SumIngredients[j];
                    let diff = Math.abs(ingrA - ingrB);
                    if(diff > CurrMin){
                        CurrMin = diff;
                    }
                }
            }
            

            if(CurrMin >= Min){
                continue;
            }
            
            Min = CurrMin;
            Index = i;
        }
    }

    return [Index, false];
}

function CanCastFromAllIngredients(CastOrdersMe){

    let CanCastIngrs = Array(4).fill(0);

    CastOrdersMe.forEach((x) => {
        x.ingredients.forEach((v, index) => {
            if(v < 0){
                CanCastIngrs[index] = 1;
            }
        })

    })

    return CanCastIngrs.every(x => x == 1);
}

function GetIndexOfId(set, id){

    for(let i = 0; i < set.length; i++){
        if(set[i].actionId == id){
            return i;
        }
    }
    return -1;
}

function GetSumIngredients(Ingredients1, Ingredients2){

    let arr = [];
    let sum = 0;

    for(let i = 0; i < Ingredients2.length; i++){
        arr[i] = Ingredients2[i] + Ingredients1[i];
        sum += arr[i];
    }

    //Check if there are more than 10 ingredients
    if(sum > 10){
        return undefined;
    }

    //I have negative ingredients
    if(arr.every(x => x >= 0) == false){
        return undefined;
    }

    return arr;
}
