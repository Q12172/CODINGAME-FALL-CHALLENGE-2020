/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/

class Order{

    constructor(Cost, price, actionId){
        this.Cost = Cost;
        this.Price = price;
        this.Id = actionId;
    }

}

class Spell{

    constructor(Cost, actionId, castable, repeatable){
        this.Cost = Cost;
        this.Id = actionId;
        this.Castable = castable;
        this.Repeatable = repeatable;
    }

}

class LearnSpell{

    constructor(Cost, actionId, repeatable, tomeIndex, taxCount){
        this.Cost = Cost;
        this.Id = actionId;
        this.Repeatable = repeatable;
        this.TomeIndex = tomeIndex;
        this.TaxCount = taxCount;
    }

}

class Player{

    constructor(inventory, score, spells){
        this.Inventory = inventory;
        this.Score = score;
        this.NumberOfOrderProvided = 0;
        this.Spells = spells;
    }
}

let Me = new Player([], 0, []);
let Op = new Player([], 0, []);

let PossiblesPaths;

let CurrentPath = [];
let CurrentPrice = 0;

let Learn = 9;

let Time = 0;

let Global_Path = [];

let Learned = -1;

let Values = [0.5, 2, 3, 4];

let GameGonnaBeOver = false;

let States = [];

// game loop
while (true) {
    const actionCount = +readline(); // the number of spells and recipes in play
    Time = Date.now();
    let Orders = [];
    let IndexOrders = 0;
    let IndexLearnableSpells = 0;
    let IndexMeSpells = 0;
    let LearnableSpells = [];
    Me.Spells = [];
    Op.Spells = [];

    for (let i = 0; i < actionCount; i++) {
        var inputs = readline().split(' ');
        const actionId = +inputs[0]; // the unique ID of this spell or recipe
        const actionType = inputs[1]; // in the first league: BREW; later: CAST, OPPONENT_CAST, LEARN, BREW
        const delta0 = +inputs[2]; // tier-0 ingredient change
        const delta1 = +inputs[3]; // tier-1 ingredient change
        const delta2 = +inputs[4]; // tier-2 ingredient change
        const delta3 = +inputs[5]; // tier-3 ingredient change
        const price = +inputs[6]; // the price in rupees if this is a potion
        const tomeIndex = +inputs[7]; // in the first two leagues: always 0; later: the index in the tome if this is a tome spell, equal to the read-ahead tax; For brews, this is the value of the current urgency bonus
        const taxCount = +inputs[8]; // in the first two leagues: always 0; later: the amount of taxed tier-0 ingredients you gain from learning this spell; For brews, this is how many times you can still gain an urgency bonus
        const castable = inputs[9] !== '0'; // in the first league: always 0; later: 1 if this is a castable player spell
        const repeatable = inputs[10] !== '0'; // for the first two leagues: always 0; later: 1 if this is a repeatable player spell
        if(actionType == "BREW"){
            Orders[IndexOrders] = new Order([delta0, delta1, delta2, delta3], price, actionId);
            IndexOrders++;
        }
        else if(actionType == "CAST"){
            Me.Spells[IndexMeSpells] = new Spell([delta0, delta1, delta2, delta3], actionId, castable, repeatable);
            IndexMeSpells++;
        }
        else if(actionType == "LEARN"){
            LearnableSpells[IndexLearnableSpells] = new LearnSpell([delta0, delta1, delta2, delta3], actionId, repeatable, tomeIndex, taxCount);
            IndexLearnableSpells++;
        }
    }

    for (let i = 0; i < 2; i++) {
        var inputs = readline().split(' ');
        const inv0 = +inputs[0]; // tier-0 ingredients in inventory
        const inv1 = +inputs[1];
        const inv2 = +inputs[2];
        const inv3 = +inputs[3];
        const score = +inputs[4] // amount of rupees
        if(i == 0){
            if(score != Me.Score)
                Me.NumberOfOrderProvided++;
            Me.Inventory = [inv0, inv1, inv2, inv3];
            Me.Score = score;
        }
        else{
            if(score != Op.Score)
                Op.NumberOfOrderProvided++;
            Op.Score = score;
        }
    }


    if(Learn > 0){
        let ID = WhatLearn(LearnableSpells, Me.Inventory[0], Me.Spells);
        if(ID != -1)
            console.log("LEARN " + ID + " Hmm...");
        Learn--;
        if(ID != -1)
            continue;
    }

    if(Learned != -1){
        let RealId = Me.Spells[Me.Spells.length - 1].Id;

        for(let i = 0; i < CurrentPath.length; i++){
            if(CurrentPath[i].actionId == Learned)
                CurrentPath[i].actionId = RealId;
        }

        Learned = -1;
    }

    Me.Spells.sort(EvalGainAndCost)
    LearnableSpells.sort(EvalGainAndCost)

    PossiblesPaths = undefined;
    Global_Path = [];
    States = [];

    //if(!GameGonnaBeOver && (Me.NumberOfOrderProvided == 5 || Op.NumberOfOrderProvided == 5))
        //GameGonnaBeOver = true;

    if(Me.NumberOfOrderProvided == 5)
        GameGonnaBeOver = true;

    if(CurrentPath.length != 0 && (!TargetOrderIsExist(CurrentPath, Orders) || !LearnSpellIsExist(LearnableSpells, CurrentPath))){
        CurrentPath = [];
        CurrentPrice = 0;
    }

    Sim(Me.Inventory, Me.Spells, Orders, LearnableSpells, 4, 0);

    if(PossiblesPaths != undefined && (CurrentPath.length == 0 || PossiblesPaths.Price > CurrentPrice)){
        if(TargetOrderIsExist(PossiblesPaths.Path, Orders) && LearnSpellIsExist(LearnableSpells, PossiblesPaths.Path)){
            CurrentPath = PossiblesPaths.Path;
            CurrentPrice = PossiblesPaths.Price;
        }
    }

    console.error("CurrentPath: ")
    console.error(CurrentPath)
    console.error()

    //console.error("TIME: "+(Date.now() - Time));

    if(CurrentPath.length != 0){
        let Step = CurrentPath.splice(0,1)[0];
        if(Step.Action == "LEARN"){
            console.log(Step.Action + " " + Step.actionId + " Hmm...");
            Learned = Step.actionId;
        }
        else if(Step.Action == "CAST" && Step.Times != undefined){
            console.log(Step.Action + " " + Step.actionId + " " + Step.Times + " Hocus Pocus...");
        }
        else if(Step.Action == "REST"){
            console.log(Step.Action + " ZZzz...");
        }
        else{
            console.log(Step.Action + " " + Step.actionId + " I want to be in gold!!!");
        }
    }
    else{
        DoASpell(Me.Inventory, Me.Spells);
    }
}

function LearnSpellIsExist(LearnableSpells, CurrentPath){

    for(let i = 0; i < CurrentPath.length; i++){
        if(CurrentPath[i].Action == "LEARN"){
            let LearnId = CurrentPath[i].actionId;
            let check = false;

            for(let j = 0; j < 6; j++){
                if(LearnableSpells[j].Id == LearnId){
                    check = true;
                    break;
                }
            }

            if(!check)
                return false; 
        }
    }

    return true;
}

function GetNumberOfNon_BluesInInventory(Inventory){

    return Inventory[1] + Inventory[2] + Inventory[3];
}

function WhatLearn(LearnableSpells, NumberOfBlues, Spells){

    let CanDoAChainReaction = 0;
    let BestId = -1;

    for(let i = 0; i < 6; i++){
        let LearnableSpell = LearnableSpells[i];
        if(LearnableSpell.TomeIndex > NumberOfBlues) continue;

        let inventoryGain = [0,0,0,0];//Array(4).fill(0)
        let inventoryCost = [0,0,0,0];//Array(4).fill(0);
        let sumCost = 0;

        for(let j = 0; j < 4; j++){
            if(LearnableSpell.Cost[j] > 0){
                inventoryGain[j] = LearnableSpell.Cost[j];
            }
            else if(LearnableSpell.Cost[j] < 0){
                inventoryCost[j] = LearnableSpell.Cost[j];
                sumCost += inventoryCost[j] * -1;
            }
        }

        if(sumCost > 4) continue;

        for(let j = 0; j < Spells.length; j++){
            if(Spells[j].Repeatable == false) continue;

            let SumInven = Combine(Spells[j].Cost, inventoryGain);
            if(SumInven != undefined){
                SumInven = Combine(inventoryCost, SumInven);
                if(SumInven != undefined){

                    let s = 0;
                    for(let k = 0; k < 4; k++){
                        s += SumInven[k] * Values[k];
                    }

                    if(s > CanDoAChainReaction){
                        s = CanDoAChainReaction;
                        BestId = LearnableSpell.Id;
                        //console.error("BestId: "+BestId)
                    }
                }
            }
        }
    }

    if(BestId != -1)
        return BestId;

    return GetIdLearn(LearnableSpells, NumberOfBlues);

}

function GetIdLearn(LearnableSpells, NumberOfBlues){

    let Max = -100;
    let BestId = -1;

    for(let i = 0; i < 6; i++){
        let LearnableSpell = LearnableSpells[i];

        if(LearnableSpell.TomeIndex > NumberOfBlues) continue;

        let gain = 0;
        let cost = 0;
        let sumCost = 0;

        for(let j = 0; j < 4; j++){
            if(LearnableSpell.Cost[j] < 0){
                cost += LearnableSpell.Cost[j] * -1 * Values[j];
                sumCost += LearnableSpell.Cost[j] * -1;
            }
            else if(LearnableSpell.Cost[j] > 0){
                gain += LearnableSpell.Cost[j] * Values[j];
            }
        }

        if(sumCost > 4) continue;

        let diff = gain - cost;

        if(diff > Max){
            Max = diff;
            BestId = LearnableSpell.Id;
        }

    }

    return BestId;
}

function DoASpell(Inventory, Spells){

    let Max = -10000;
    let Id = -1;

    for(let i = 0; i < Spells.length; i++){
        let spell = Spells[i];
        if(spell.Castable == false || CanCombine(Inventory, spell.Cost) == false) continue;

        let gain = 0;
        let cost = 0;

        for(let j = 0; j < spell.Cost.length; j++){
            if(spell.Cost[j] < 0){
                cost += spell.Cost[j] * -1 * Values[j];
            }
            else if(spell.Cost[j] > 0){
                gain += spell.Cost[j] * Values[j];
            }
        }

        let diff = gain - cost;
        if(diff > Max){
            Max = diff;
            Id = spell.Id;
        }
    }

    if(Id != -1){
        console.log("CAST " + Id + " Hocus Pocus...");
    }
    else{
        console.log("REST ZZzz...");
    }

}

function EvalGainAndCost(a,b){

    let Gain = 0;
    let Cost = 0;

    for(let j = 0; j < 4; j++){
        if(a.Cost[j] > 0){
            Gain += a.Cost[j] * Values[j];
        }
        else if(a.Cost[j] < 0){
            Cost += a.Cost[j] * -1 * Values[j];
        }
    }

    let diffA = Gain - Cost;

    Gain = 0;
    Cost = 0;

    for(let j = 0; j < 4; j++){
        if(b.Cost[j] > 0){
            Gain += b.Cost[j] * Values[j];
        }
        else if(b.Cost[j] < 0){
            Cost += b.Cost[j] * -1 * Values[j];
        }
    }

    let diffB = Gain - Cost;

    if(diffB > diffA)
        return -1;
    else if(diffB == diffA)
        return 0;
    else
        return 1;
}

function Sim(inventory, spells, orders, LearnSpells, depth, Price){

    if(depth == 0) return false;

    if(Date.now() - Time >= 50) return false;

    for(let i = spells.length - 1; i > -1; i--){
        let spell = spells[i];
        let NumberOfCast = 1;

        if(spell.Castable){
            while(true){
                if(NumberOfCast > 1 && !spell.Repeatable){
                    break;
                }

                let mone = 1;

                let SumInventory = Combine(inventory, spell.Cost);
                while(mone < NumberOfCast){
                    SumInventory = Combine(SumInventory, spell.Cost);
                    mone++;
                }

                if(SumInventory != undefined){
                    let Index = CanProvideOrder(SumInventory, orders);

                    if(NumberOfCast == 1)
                        Global_Path.push({Action: "CAST", actionId: spell.Id});
                    else
                        Global_Path.push({Action: "CAST", actionId: spell.Id, Times: NumberOfCast});

                    if(Index != -1){
                        let price = orders[Index].Price;
                        let ActionId = orders[Index].Id;
                        Global_Path.push({Action: "BREW", actionId: ActionId});

                        SumInventory = Combine(SumInventory, orders[Index].Cost);

                        Price += price;

                        let sum = SumInventory[0] * 0.5 + SumInventory[1] * 2 + 
                        SumInventory[2] * 3 + SumInventory[3] * 3 - Global_Path.length * 3;

                        Price += sum;

                        if(GameGonnaBeOver){
                            if(price + Me.Score > Op.Score){
                                PossiblesPaths = {Path: Global_Path.slice(), Price};
                                return true;
                            }
                        }

                        if(PossiblesPaths == undefined || PossiblesPaths.Price < Price){
                            PossiblesPaths = {Path: Global_Path.slice(), Price};
                            console.error("ADD!!");
                        }

                        let NextSpells = [];
                        for(let j = 0; j < spells.length; j++){
                            NextSpells[j] = Object.assign({}, spells[j])
                        }
                        NextSpells[i].Castable = false;

                        let TempOrders = [];
                        let ind = 0;
                        for(let j = 0; j < orders.length; j++){
                            if(j == Index) continue;
                            TempOrders[ind] = Object.assign({}, orders[j])
                            ind++;
                        }

                        Price -= sum;

                        let bool = Sim(SumInventory, NextSpells, TempOrders, LearnSpells, depth - 1, Price);
                        if(bool) return true;
                        //Sim(SumInventory, NextSpells, orders, LearnSpells, depth - 1, Price)

                        Price -= price;

                        Global_Path.splice(Global_Path.length - 1,1);
                    }
                    else{
                        let NextSpells = [];
                        for(let j = 0; j < spells.length; j++){
                            NextSpells[j] = Object.assign({}, spells[j])
                        }
                        NextSpells[i].Castable = false;
                        let bool = Sim(SumInventory, NextSpells, orders, LearnSpells, depth - 1, Price);
                        if(bool) return true;
                    }

                    Global_Path.splice(Global_Path.length - 1,1);

                }
                else{
                    break;
                }

                NumberOfCast++;
            }
        }
        else{
            while(true){
                if(NumberOfCast > 1 && !spell.Repeatable){
                    break;
                }

                let mone = 1;

                let SumInventory = Combine(inventory, spell.Cost);

                while(mone < NumberOfCast){
                    SumInventory = Combine(SumInventory, spell.Cost);
                    mone++;
                }

                if(SumInventory != undefined){
                    let Index = CanProvideOrder(SumInventory, orders);

                    Global_Path.push({Action: "REST"});

                    if(NumberOfCast == 1)
                        Global_Path.push({Action: "CAST", actionId: spell.Id});
                    else
                        Global_Path.push({Action: "CAST", actionId: spell.Id, Times: NumberOfCast});

                    if(Index != -1){
                        let price = orders[Index].Price;
                        let ActionId = orders[Index].Id;
                        Global_Path.push({Action: "BREW", actionId: ActionId});

                        SumInventory = Combine(SumInventory, orders[Index].Cost);

                        Price += price;

                        let sum = SumInventory[0] * 0.5 + SumInventory[1] * 2 + 
                        SumInventory[2] * 3 + SumInventory[3] * 3 - Global_Path.length * 3;

                        Price += sum;

                        if(GameGonnaBeOver){
                            if(price + Me.Score > Op.Score){
                                PossiblesPaths = {Path: Global_Path.slice(), Price};
                                return true;
                            }
                        }

                        if(PossiblesPaths == undefined || PossiblesPaths.Price < Price){
                            PossiblesPaths = {Path: Global_Path.slice(), Price};
                            console.error("ADD!!");
                        }


                        let NextSpells = [];
                        for(let j = 0; j < spells.length; j++){
                            NextSpells[j] = Object.assign({}, spells[j])
                            NextSpells[j].Castable = true;
                        }
                        NextSpells[i].Castable = false;

                        let TempOrders = [];
                        let ind = 0;
                        for(let j = 0; j < orders.length; j++){
                            if(j == Index) continue;
                            TempOrders[ind] = Object.assign({}, orders[j])
                            ind++;
                        }

                        Price -= sum;

                        let bool = Sim(SumInventory, NextSpells, TempOrders, LearnSpells, depth - 1, Price);
                        if(bool) return true;
                        //Sim(SumInventory, NextSpells, orders, LearnSpells, depth - 1, Price)

                        Price -= price;

                        Global_Path.splice(Global_Path.length - 1,1);
                    }
                    else{
                        let NextSpells = [];
                        for(let j = 0; j < spells.length; j++){
                            NextSpells[j] = Object.assign({}, spells[j])
                            NextSpells[j].Castable = true;
                        }
                        NextSpells[i].Castable = false;
                        let bool = Sim(SumInventory, NextSpells, orders, LearnSpells, depth - 1, Price);
                        if(bool) return true;
                    }
                    
                    Global_Path.splice(Global_Path.length - 2, 2);

                }
                else{
                    break;
                }

                NumberOfCast++;
            }
        }
    }

    for(let i = LearnSpells.length - 1; i > -1; i--){
        let spell = LearnSpells[i];

        if(spell.TomeIndex > inventory[0]) break;

        inventory[0] -= spell.TomeIndex;
        inventory[0] += spell.TaxCount;

        let NumberOfCast = 1;

        while(true){
            if(NumberOfCast > 1 && !spell.Repeatable){
                break;
            }

            let mone = 1;
            let SumInventory = Combine(inventory, spell.Cost);
            while(mone < NumberOfCast){
                SumInventory = Combine(SumInventory, spell.Cost);
                mone++;
            }

            if(SumInventory != undefined){
                let Index = CanProvideOrder(SumInventory, orders);
                Global_Path.push({Action: "LEARN", actionId: spell.Id});

                if(NumberOfCast == 1)
                    Global_Path.push({Action: "CAST", actionId: spell.Id});
                else
                    Global_Path.push({Action: "CAST", actionId: spell.Id, Times: NumberOfCast});

                if(Index != -1){
                    let price = orders[Index].Price;
                    let ActionId = orders[Index].Id;
                    Global_Path.push({Action: "BREW", actionId: ActionId});

                    SumInventory = Combine(SumInventory, orders[Index].Cost);

                    Price += price;

                    let sum = SumInventory[0] * 0.5 + SumInventory[1] * 2 + 
                    SumInventory[2] * 3 + SumInventory[3] * 3 - Global_Path.length * 3;

                    Price += sum;

                    if(GameGonnaBeOver){
                        if(price + Me.Score > Op.Score){
                            PossiblesPaths = {Path: Global_Path.slice(), Price};
                            return true;
                        }
                     }

                    if(PossiblesPaths == undefined || PossiblesPaths.Price < Price){
                        PossiblesPaths = {Path: Global_Path.slice(), Price};
                        console.error("ADD!!");
                    }

                    let NextSpells = [];
                    for(let j = 0; j < spells.length; j++){
                        NextSpells[j] = Object.assign({}, spells[j])
                    }
                    spell.Castable = false;
                    NextSpells.push(spell);

                    let TempLearnSpells = [];
                    let ind = 0;
                    for(let j = 0; j < LearnSpells.length; j++){
                        if(j == i) continue;
                        TempLearnSpells[ind] = Object.assign({}, LearnSpells[j]);
                        ind++;
                    }

                    let TempOrders = [];
                    ind = 0;
                    for(let j = 0; j < orders.length; j++){
                        if(j == Index) continue;
                        TempOrders[ind] = Object.assign({}, orders[j])
                        ind++;
                    }

                    Price -= sum;

                    let bool = Sim(SumInventory, NextSpells, TempOrders, TempLearnSpells, depth - 1, Price);
                    if(bool) return true;
                    //Sim(SumInventory, NextSpells, orders, TempLearnSpells, depth - 1, Price)

                    Price -= price;

                    Global_Path.splice(Global_Path.length - 1,1);
                }
                else{
                    let NextSpells = [];
                    for(let j = 0; j < spells.length; j++){
                        NextSpells[j] = Object.assign({}, spells[j])
                    }
                    spell.Castable = false;
                    NextSpells.push(spell);

                    let TempLearnSpells = [];
                    let ind = 0;
                    for(let j = 0; j < LearnSpells.length; j++){
                        if(j == i) continue;
                        TempLearnSpells[ind] = Object.assign({}, LearnSpells[j]);
                        ind++;
                    }

                    let bool = Sim(SumInventory, NextSpells, orders, TempLearnSpells, depth - 1, Price);
                    if(bool) return true;
                }

                Global_Path.splice(Global_Path.length - 2,2);
            }
            else{
                break;
            }
            NumberOfCast++;
        }

        inventory[0] += spell.TomeIndex;
        inventory[0] -= spell.TaxCount;
    }

}

function CanProvideOrder(inventory, orders){

    let maxPrice = -10000;
    let Index = -1;

    for(let i = 0; i < orders.length; i++){
        if(CanCombine(inventory, orders[i].Cost) == true && maxPrice < orders[i].Price){
            Index = i;
            maxPrice = orders[i].Price;
        }
    }

    return Index;
}

function CanCombine(inventory1, inventory2){
    let sum = 0;

    for(let i = 0; i < 4; i++){
        let s = inventory1[i] + inventory2[i];
        if(s < 0) return false;
        sum += s;
    }

    if(sum > 10) return false;

    return true;
}

function Combine(inventory1, inventory2){

    let arr = [];
    let sum = 0;

    for(let i = 0; i < 4; i++){
        arr[i] = inventory1[i] + inventory2[i];
        if(arr[i] < 0) return undefined;
        sum += arr[i];
    }

    if(sum > 10) return undefined;

    return arr;
}

function TargetOrderIsExist(CurrPath, orders){

    for(let i = 0; i < CurrPath.length; i++){
        if(CurrPath[i].Action == "BREW"){
            let Id = CurrPath[i].actionId;

            let check = false;

            for(let j = 0; j < 5; j++){
                if(orders[j].Id == Id){
                    check = true;
                    break;
                }
            }

            if(!check)
                return false;
        }
    }

    return true;
}

function SameState(Inventory, spells){

    for(let i = 0; i < States.length; i+=2){
        let Inv = States[i];
        let MySpells = States[i + 1];

        let check = true;

        for(let j = 0; j < 4; j++){
            if(Inv[j] != Inventory[j]){
                check = false;
                break;
            }
        }

        if(!check || MySpells.length != spells.length)
            continue;

        for(let j = 0; j < MySpells.length; j++){
            if(MySpells[j].Castable != spells[j].Castable
            || MySpells[j].Id != spells[j].Id ||
            MySpells[j].Repeatable != spells[j].Repeatable){
                check = false;
                break;
            }
        }

        if(check) return {Inv, MySpells};
    }

    return undefined;
}


/*

let sum = SumInventory[0] * 0.5 + SumInventory[1] * 2 + 
SumInventory[2] * 3 + SumInventory[3] * 3.5 - Global_Path.length * 3;
*/
